/// AUTOGENERATED BY tuple_match_gen.py DO NOT MODIFY!
/// Handles matching of tuples based on the number of types they have. This
/// is kinda ugly but it seems to be required as there's no way to dynamically
/// construct an indentifer in macros. Since we can't make identifiers, we
/// cannot construct names for tuple variants which can be used during binding.
macro_rules! handle_serialize_tuple_match {
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident) => {
        if let $enumname::$enumident( ) = $self {
            Serialize::serialize($count, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty) => {
        if let $enumname::$enumident( aa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty) => {
        if let $enumname::$enumident( aa,ba,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty) => {
        if let $enumname::$enumident( aa,ba,ca,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty, $tyhc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,hc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
            Serialize::serialize(hc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty, $tyhc:ty, $tyic:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
            Serialize::serialize(hc, $buf);
            Serialize::serialize(ic, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty, $tyhc:ty, $tyic:ty, $tyjc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
            Serialize::serialize(hc, $buf);
            Serialize::serialize(ic, $buf);
            Serialize::serialize(jc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty, $tyhc:ty, $tyic:ty, $tyjc:ty, $tykc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
            Serialize::serialize(hc, $buf);
            Serialize::serialize(ic, $buf);
            Serialize::serialize(jc, $buf);
            Serialize::serialize(kc, $buf);
        }
    };
    ($self:ident, $count:expr, $buf:expr, $enumname:ident, $enumident:ident, $tyaa:ty, $tyba:ty, $tyca:ty, $tyda:ty, $tyea:ty, $tyfa:ty, $tyga:ty, $tyha:ty, $tyia:ty, $tyja:ty, $tyka:ty, $tyla:ty, $tyma:ty, $tyna:ty, $tyoa:ty, $typa:ty, $tyqa:ty, $tyra:ty, $tysa:ty, $tyta:ty, $tyua:ty, $tyva:ty, $tywa:ty, $tyxa:ty, $tyya:ty, $tyza:ty, $tyab:ty, $tybb:ty, $tycb:ty, $tydb:ty, $tyeb:ty, $tyfb:ty, $tygb:ty, $tyhb:ty, $tyib:ty, $tyjb:ty, $tykb:ty, $tylb:ty, $tymb:ty, $tynb:ty, $tyob:ty, $typb:ty, $tyqb:ty, $tyrb:ty, $tysb:ty, $tytb:ty, $tyub:ty, $tyvb:ty, $tywb:ty, $tyxb:ty, $tyyb:ty, $tyzb:ty, $tyac:ty, $tybc:ty, $tycc:ty, $tydc:ty, $tyec:ty, $tyfc:ty, $tygc:ty, $tyhc:ty, $tyic:ty, $tyjc:ty, $tykc:ty, $tylc:ty) => {
        if let $enumname::$enumident( aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,lc,) = $self {
            Serialize::serialize($count, $buf);
            Serialize::serialize(aa, $buf);
            Serialize::serialize(ba, $buf);
            Serialize::serialize(ca, $buf);
            Serialize::serialize(da, $buf);
            Serialize::serialize(ea, $buf);
            Serialize::serialize(fa, $buf);
            Serialize::serialize(ga, $buf);
            Serialize::serialize(ha, $buf);
            Serialize::serialize(ia, $buf);
            Serialize::serialize(ja, $buf);
            Serialize::serialize(ka, $buf);
            Serialize::serialize(la, $buf);
            Serialize::serialize(ma, $buf);
            Serialize::serialize(na, $buf);
            Serialize::serialize(oa, $buf);
            Serialize::serialize(pa, $buf);
            Serialize::serialize(qa, $buf);
            Serialize::serialize(ra, $buf);
            Serialize::serialize(sa, $buf);
            Serialize::serialize(ta, $buf);
            Serialize::serialize(ua, $buf);
            Serialize::serialize(va, $buf);
            Serialize::serialize(wa, $buf);
            Serialize::serialize(xa, $buf);
            Serialize::serialize(ya, $buf);
            Serialize::serialize(za, $buf);
            Serialize::serialize(ab, $buf);
            Serialize::serialize(bb, $buf);
            Serialize::serialize(cb, $buf);
            Serialize::serialize(db, $buf);
            Serialize::serialize(eb, $buf);
            Serialize::serialize(fb, $buf);
            Serialize::serialize(gb, $buf);
            Serialize::serialize(hb, $buf);
            Serialize::serialize(ib, $buf);
            Serialize::serialize(jb, $buf);
            Serialize::serialize(kb, $buf);
            Serialize::serialize(lb, $buf);
            Serialize::serialize(mb, $buf);
            Serialize::serialize(nb, $buf);
            Serialize::serialize(ob, $buf);
            Serialize::serialize(pb, $buf);
            Serialize::serialize(qb, $buf);
            Serialize::serialize(rb, $buf);
            Serialize::serialize(sb, $buf);
            Serialize::serialize(tb, $buf);
            Serialize::serialize(ub, $buf);
            Serialize::serialize(vb, $buf);
            Serialize::serialize(wb, $buf);
            Serialize::serialize(xb, $buf);
            Serialize::serialize(yb, $buf);
            Serialize::serialize(zb, $buf);
            Serialize::serialize(ac, $buf);
            Serialize::serialize(bc, $buf);
            Serialize::serialize(cc, $buf);
            Serialize::serialize(dc, $buf);
            Serialize::serialize(ec, $buf);
            Serialize::serialize(fc, $buf);
            Serialize::serialize(gc, $buf);
            Serialize::serialize(hc, $buf);
            Serialize::serialize(ic, $buf);
            Serialize::serialize(jc, $buf);
            Serialize::serialize(kc, $buf);
            Serialize::serialize(lc, $buf);
        }
    };
}
